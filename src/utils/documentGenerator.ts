import jsPDF from 'jspdf';
import { Document, Packer, Paragraph, TextRun, HeadingLevel } from 'docx';
import { saveAs } from 'file-saver';
import { Template, DocumentData } from '../types';

export const generateDocument = async (
  template: Template,
  data: DocumentData,
  format: 'pdf' | 'docx'
): Promise<void> => {
  const content = generateContent(template, data);
  
  if (format === 'pdf') {
    await generatePDF(template.title, content);
  } else {
    await generateDOCX(template.title, content);
  }
};

const generateContent = (template: Template, data: DocumentData): string => {
  switch (template.id) {
    case 'assignment':
      return generateAssignment(data);
    case 'report':
      return generateReport(data);
    case 'coverLetter':
      return generateCoverLetter(data);
    case 'proposal':
      return generateProposal(data);
    case 'citation':
      return generateCitation(data);
    case 'contract':
      return generateContract(data);
    default:
      return generateGenericDocument(template, data);
  }
};

const generateAssignment = (data: DocumentData): string => {
  return `
# ${data.topic || 'Assignment Topic'}

**Subject:** ${data.subject || 'Subject'}
**Word Count:** ${data.wordCount || 'Not specified'}
**Tone:** ${data.tone || 'Academic'}

## Introduction

This assignment explores ${data.topic || 'the specified topic'} within the context of ${data.subject || 'the subject area'}. The following analysis will provide comprehensive insights and demonstrate understanding of key concepts.

## Main Content

[This section would contain the main body of your assignment. Please expand on your topic, providing detailed analysis, examples, and supporting evidence.]

${data.instructions ? `\n## Special Instructions\n\n${data.instructions}` : ''}

## Methodology

[Describe the approach and methods used in this assignment]

## Analysis

[Provide detailed analysis relevant to your topic]

## Conclusion

[Summarize your findings and key insights]

## References

[Include your references and citations here]

---

*Generated by SmartDocsHub.com*
  `;
};

const generateReport = (data: DocumentData): string => {
  return `
# ${data.projectTitle || 'Project Report'}

## Executive Summary

This report presents the findings and outcomes of ${data.projectTitle || 'the project'}.

## Project Objective

${data.objective || 'Project objective not specified'}

## Methodology

${data.methodology || 'Methodology not specified'}

## Timeline

**Project Duration:** ${data.timeline || 'Not specified'}

${data.budget ? `## Budget\n\n**Budget:** ${data.budget}` : ''}

## Results and Findings

[This section should detail your project results, data analysis, and key findings]

## Recommendations

[Based on your findings, provide actionable recommendations]

## Conclusion

[Summarize the project outcomes and future implications]

## Appendices

[Include supporting documents, charts, and additional data]

---

*Generated by SmartDocsHub.com*
  `;
};

const generateCoverLetter = (data: DocumentData): string => {
  const currentDate = new Date().toLocaleDateString();
  
  return `
${currentDate}

Dear Hiring Manager,

I am writing to express my strong interest in the ${data.jobTitle || 'position'} role at ${data.company || 'your company'}. With ${data.experience || 'several'} years of experience in the field, I am confident that my skills and passion make me an ideal candidate for this position.

## Why I'm the Right Fit

${data.skills ? `My key skills include:\n${data.skills}` : 'I bring a diverse set of skills and experiences that align perfectly with your requirements.'}

## My Value Proposition

Throughout my career, I have consistently delivered exceptional results and contributed to organizational success. I am particularly drawn to ${data.company || 'your company'} because of its reputation for innovation and excellence.

## Next Steps

I would welcome the opportunity to discuss how my background and enthusiasm can contribute to your team's continued success. Thank you for considering my application.

Sincerely,
[Your Name]

---

*Generated by SmartDocsHub.com*
  `;
};

const generateProposal = (data: DocumentData): string => {
  return `
# Freelance Project Proposal

${data.clientName ? `**Client:** ${data.clientName}` : ''}
**Project Type:** ${data.projectType || 'Project'}
**Date:** ${new Date().toLocaleDateString()}

## Project Overview

Thank you for considering me for your ${data.projectType || 'project'} needs. I am excited to present this comprehensive proposal outlining how I can help bring your vision to life.

## Project Timeline

**Estimated Duration:** ${data.timeline || 'To be discussed'}

## Budget

**Investment:** ${data.budget || 'To be discussed'}

## Key Deliverables

${data.deliverables || 'Deliverables to be specified based on project requirements'}

## My Approach

I believe in clear communication, timely delivery, and exceptional quality. My process includes:

1. **Discovery Phase** - Understanding your requirements
2. **Planning Phase** - Detailed project roadmap
3. **Execution Phase** - Regular updates and milestone delivery
4. **Review Phase** - Testing and refinement
5. **Delivery Phase** - Final handover and support

## Why Choose Me

- Proven track record of successful project delivery
- Clear communication throughout the project lifecycle
- Commitment to quality and client satisfaction
- Flexible approach to meet your specific needs

## Next Steps

I would love to discuss this proposal with you in detail. Please feel free to reach out to schedule a consultation.

Best regards,
[Your Name]

---

*Generated by SmartDocsHub.com*
  `;
};

const generateCitation = (data: DocumentData): string => {
  const style = data.citationStyle as string;
  const sourceType = data.sourceType as string;
  const title = data.title as string;
  const author = data.author as string;
  const date = data.publicationDate as string;

  let citation = '';

  switch (style) {
    case 'APA':
      citation = generateAPACitation(sourceType, author, title, date);
      break;
    case 'MLA':
      citation = generateMLACitation(sourceType, author, title, date);
      break;
    case 'Chicago':
      citation = generateChicagoCitation(sourceType, author, title, date);
      break;
    case 'Harvard':
      citation = generateHarvardCitation(sourceType, author, title, date);
      break;
    default:
      citation = `${author}. ${title}. ${date}.`;
  }

  return `
# Citation Generator Result

## ${style} Style Citation

**Source Type:** ${sourceType}

### Formatted Citation:

${citation}

### Bibliography Entry:

${citation}

---

**How to use this citation:**
- Copy the formatted citation above
- Paste it into your document's reference list
- Ensure all details are accurate before submission

*Generated by SmartDocsHub.com*
  `;
};

const generateAPACitation = (sourceType: string, author: string, title: string, date: string): string => {
  const year = date ? new Date(date).getFullYear() : 'n.d.';
  
  switch (sourceType) {
    case 'Book':
      return `${author} (${year}). *${title}*. Publisher.`;
    case 'Journal Article':
      return `${author} (${year}). ${title}. *Journal Name*, *Volume*(Issue), pages.`;
    case 'Website':
      return `${author} (${year}). ${title}. *Website Name*. URL`;
    default:
      return `${author} (${year}). ${title}.`;
  }
};

const generateMLACitation = (sourceType: string, author: string, title: string, date: string): string => {
  switch (sourceType) {
    case 'Book':
      return `${author}. *${title}*. Publisher, ${date}.`;
    case 'Journal Article':
      return `${author}. "${title}." *Journal Name*, vol. #, no. #, ${date}, pp. #-#.`;
    case 'Website':
      return `${author}. "${title}." *Website Name*, ${date}, URL.`;
    default:
      return `${author}. "${title}." ${date}.`;
  }
};

const generateChicagoCitation = (sourceType: string, author: string, title: string, date: string): string => {
  switch (sourceType) {
    case 'Book':
      return `${author}. *${title}*. Place: Publisher, ${date}.`;
    case 'Journal Article':
      return `${author}. "${title}." *Journal Name* Volume, no. Issue (${date}): pages.`;
    case 'Website':
      return `${author}. "${title}." *Website Name*. Accessed Date. URL.`;
    default:
      return `${author}. *${title}*. ${date}.`;
  }
};

const generateHarvardCitation = (sourceType: string, author: string, title: string, date: string): string => {
  const year = date ? new Date(date).getFullYear() : 'n.d.';
  
  switch (sourceType) {
    case 'Book':
      return `${author}, ${year}. *${title}*. Place: Publisher.`;
    case 'Journal Article':
      return `${author}, ${year}. '${title}', *Journal Name*, vol. #, no. #, pp. #-#.`;
    case 'Website':
      return `${author}, ${year}. *${title}* [Online]. Available at: URL [Accessed Date].`;
    default:
      return `${author}, ${year}. *${title}*.`;
  }
};

const generateContract = (data: DocumentData): string => {
  return `
# ${data.contractType || 'Service Agreement'}

**Date:** ${new Date().toLocaleDateString()}
**Duration:** ${data.duration || 'As specified below'}

## Parties

**First Party:** ${data.party1 || '[First Party Name]'}
**Second Party:** ${data.party2 || '[Second Party Name]'}

## Terms and Conditions

${data.terms || 'Terms and conditions to be specified'}

## Duration

This agreement shall remain in effect for ${data.duration || 'the specified period'}.

## Obligations

### First Party Obligations:
- [Specify obligations of first party]

### Second Party Obligations:
- [Specify obligations of second party]

## Payment Terms

[Specify payment terms, amounts, and schedules]

## Confidentiality

Both parties agree to maintain confidentiality of sensitive information shared during the course of this agreement.

## Termination

This agreement may be terminated by either party with appropriate notice as specified herein.

## Governing Law

This agreement shall be governed by the laws of [Jurisdiction].

## Signatures

**First Party:** _________________________ Date: _________

**Second Party:** _________________________ Date: _________

---

*This is a template document generated by SmartDocsHub.com. Please review with legal counsel before use.*
  `;
};

const generateGenericDocument = (template: Template, data: DocumentData): string => {
  let content = `# ${template.title}\n\n`;
  
  template.fields.forEach(field => {
    const value = data[field.id];
    if (value) {
      content += `**${field.label}:** ${value}\n\n`;
    }
  });
  
  content += `\n---\n\n*Generated by SmartDocsHub.com*`;
  return content;
};

const generatePDF = async (title: string, content: string): Promise<void> => {
  const pdf = new jsPDF();
  const pageWidth = pdf.internal.pageSize.getWidth();
  const pageHeight = pdf.internal.pageSize.getHeight();
  const margin = 20;
  const lineHeight = 7;
  let yPosition = margin;

  // Title
  pdf.setFontSize(18);
  pdf.setFont('helvetica', 'bold');
  pdf.text(title, margin, yPosition);
  yPosition += lineHeight * 2;

  // Content
  pdf.setFontSize(11);
  pdf.setFont('helvetica', 'normal');
  
  const lines = content.split('\n');
  
  for (const line of lines) {
    if (yPosition > pageHeight - margin) {
      pdf.addPage();
      yPosition = margin;
    }
    
    if (line.startsWith('# ')) {
      pdf.setFontSize(16);
      pdf.setFont('helvetica', 'bold');
      pdf.text(line.substring(2), margin, yPosition);
      pdf.setFontSize(11);
      pdf.setFont('helvetica', 'normal');
    } else if (line.startsWith('## ')) {
      pdf.setFontSize(14);
      pdf.setFont('helvetica', 'bold');
      pdf.text(line.substring(3), margin, yPosition);
      pdf.setFontSize(11);
      pdf.setFont('helvetica', 'normal');
    } else if (line.startsWith('**') && line.endsWith('**')) {
      pdf.setFont('helvetica', 'bold');
      pdf.text(line.substring(2, line.length - 2), margin, yPosition);
      pdf.setFont('helvetica', 'normal');
    } else {
      const textLines = pdf.splitTextToSize(line, pageWidth - 2 * margin);
      pdf.text(textLines, margin, yPosition);
      yPosition += lineHeight * (textLines.length - 1);
    }
    
    yPosition += lineHeight;
  }

  pdf.save(`${title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.pdf`);
};

const generateDOCX = async (title: string, content: string): Promise<void> => {
  const paragraphs: Paragraph[] = [];
  const lines = content.split('\n');

  for (const line of lines) {
    if (line.startsWith('# ')) {
      paragraphs.push(
        new Paragraph({
          text: line.substring(2),
          heading: HeadingLevel.HEADING_1,
        })
      );
    } else if (line.startsWith('## ')) {
      paragraphs.push(
        new Paragraph({
          text: line.substring(3),
          heading: HeadingLevel.HEADING_2,
        })
      );
    } else if (line.startsWith('**') && line.endsWith('**')) {
      paragraphs.push(
        new Paragraph({
          children: [
            new TextRun({
              text: line.substring(2, line.length - 2),
              bold: true,
            }),
          ],
        })
      );
    } else {
      paragraphs.push(
        new Paragraph({
          text: line,
        })
      );
    }
  }

  const doc = new Document({
    sections: [
      {
        properties: {},
        children: paragraphs,
      },
    ],
  });

  const buffer = await Packer.toBuffer(doc);
  const blob = new Blob([buffer], {
    type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
  });
  
  saveAs(blob, `${title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.docx`);
};