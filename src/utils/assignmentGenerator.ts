import jsPDF from 'jspdf';
import { Document, Packer, Paragraph, TextRun, HeadingLevel } from 'docx';
import { saveAs } from 'file-saver';
import { CourseAssignment } from '../types';

export const generateAssignmentDocument = async (
  assignment: CourseAssignment,
  format: 'pdf' | 'docx'
): Promise<void> => {
  if (format === 'pdf') {
    await generateAssignmentPDF(assignment);
  } else {
    await generateAssignmentDOCX(assignment);
  }
};

const generateAssignmentPDF = async (assignment: CourseAssignment): Promise<void> => {
  const pdf = new jsPDF();
  const pageWidth = pdf.internal.pageSize.getWidth();
  const pageHeight = pdf.internal.pageSize.getHeight();
  const margin = 20;
  const lineHeight = 7;
  let yPosition = margin;

  // Header with course info
  pdf.setFontSize(12);
  pdf.setFont('helvetica', 'normal');
  pdf.text(`Course: ${assignment.courseCode} - Semester ${assignment.semester}`, margin, yPosition);
  yPosition += lineHeight;
  pdf.text(`Subject: ${assignment.subject}`, margin, yPosition);
  yPosition += lineHeight * 2;

  // Title
  pdf.setFontSize(18);
  pdf.setFont('helvetica', 'bold');
  const titleLines = pdf.splitTextToSize(assignment.title, pageWidth - 2 * margin);
  pdf.text(titleLines, margin, yPosition);
  yPosition += lineHeight * titleLines.length + lineHeight;

  // Content
  pdf.setFontSize(11);
  pdf.setFont('helvetica', 'normal');
  
  const lines = assignment.content.split('\n');
  
  for (const line of lines) {
    if (yPosition > pageHeight - margin) {
      pdf.addPage();
      yPosition = margin;
    }
    
    if (line.startsWith('# ')) {
      pdf.setFontSize(16);
      pdf.setFont('helvetica', 'bold');
      const text = line.substring(2);
      const textLines = pdf.splitTextToSize(text, pageWidth - 2 * margin);
      pdf.text(textLines, margin, yPosition);
      yPosition += lineHeight * textLines.length;
      pdf.setFontSize(11);
      pdf.setFont('helvetica', 'normal');
    } else if (line.startsWith('## ')) {
      pdf.setFontSize(14);
      pdf.setFont('helvetica', 'bold');
      const text = line.substring(3);
      const textLines = pdf.splitTextToSize(text, pageWidth - 2 * margin);
      pdf.text(textLines, margin, yPosition);
      yPosition += lineHeight * textLines.length;
      pdf.setFontSize(11);
      pdf.setFont('helvetica', 'normal');
    } else if (line.startsWith('### ')) {
      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'bold');
      const text = line.substring(4);
      const textLines = pdf.splitTextToSize(text, pageWidth - 2 * margin);
      pdf.text(textLines, margin, yPosition);
      yPosition += lineHeight * textLines.length;
      pdf.setFontSize(11);
      pdf.setFont('helvetica', 'normal');
    } else if (line.startsWith('**') && line.endsWith('**')) {
      pdf.setFont('helvetica', 'bold');
      const text = line.substring(2, line.length - 2);
      const textLines = pdf.splitTextToSize(text, pageWidth - 2 * margin);
      pdf.text(textLines, margin, yPosition);
      yPosition += lineHeight * textLines.length;
      pdf.setFont('helvetica', 'normal');
    } else if (line.trim() !== '') {
      const textLines = pdf.splitTextToSize(line, pageWidth - 2 * margin);
      pdf.text(textLines, margin, yPosition);
      yPosition += lineHeight * textLines.length;
    }
    
    yPosition += lineHeight * 0.5; // Small spacing between lines
  }

  // Footer
  const totalPages = pdf.getNumberOfPages();
  for (let i = 1; i <= totalPages; i++) {
    pdf.setPage(i);
    pdf.setFontSize(10);
    pdf.setFont('helvetica', 'normal');
    pdf.text(
      `Generated by SmartDocsHub.com - Page ${i} of ${totalPages}`,
      pageWidth / 2,
      pageHeight - 10,
      { align: 'center' }
    );
  }

  const fileName = `${assignment.courseCode}_${assignment.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.pdf`;
  pdf.save(fileName);
};

const generateAssignmentDOCX = async (assignment: CourseAssignment): Promise<void> => {
  const paragraphs: Paragraph[] = [];

  // Header
  paragraphs.push(
    new Paragraph({
      children: [
        new TextRun({
          text: `Course: ${assignment.courseCode} - Semester ${assignment.semester}`,
          size: 24,
        }),
      ],
    }),
    new Paragraph({
      children: [
        new TextRun({
          text: `Subject: ${assignment.subject}`,
          size: 24,
        }),
      ],
    }),
    new Paragraph({ text: '' }) // Empty line
  );

  // Title
  paragraphs.push(
    new Paragraph({
      text: assignment.title,
      heading: HeadingLevel.TITLE,
    }),
    new Paragraph({ text: '' }) // Empty line
  );

  // Content
  const lines = assignment.content.split('\n');

  for (const line of lines) {
    if (line.startsWith('# ')) {
      paragraphs.push(
        new Paragraph({
          text: line.substring(2),
          heading: HeadingLevel.HEADING_1,
        })
      );
    } else if (line.startsWith('## ')) {
      paragraphs.push(
        new Paragraph({
          text: line.substring(3),
          heading: HeadingLevel.HEADING_2,
        })
      );
    } else if (line.startsWith('### ')) {
      paragraphs.push(
        new Paragraph({
          text: line.substring(4),
          heading: HeadingLevel.HEADING_3,
        })
      );
    } else if (line.startsWith('**') && line.endsWith('**')) {
      paragraphs.push(
        new Paragraph({
          children: [
            new TextRun({
              text: line.substring(2, line.length - 2),
              bold: true,
            }),
          ],
        })
      );
    } else if (line.trim() !== '') {
      paragraphs.push(
        new Paragraph({
          text: line,
        })
      );
    } else {
      paragraphs.push(new Paragraph({ text: '' })); // Empty line
    }
  }

  // Footer
  paragraphs.push(
    new Paragraph({ text: '' }),
    new Paragraph({
      children: [
        new TextRun({
          text: 'Generated by SmartDocsHub.com',
          italics: true,
          size: 20,
        }),
      ],
    })
  );

  const doc = new Document({
    sections: [
      {
        properties: {},
        children: paragraphs,
      },
    ],
  });

  const buffer = await Packer.toBuffer(doc);
  const blob = new Blob([buffer], {
    type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
  });
  
  const fileName = `${assignment.courseCode}_${assignment.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.docx`;
  saveAs(blob, fileName);
};